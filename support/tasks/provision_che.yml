---

- name: Define che
  set_fact:
    che_project: "rh-che-{{guid}}"
      
- name: Create project for CHE IDE
  shell: "oc new-project {{che_project}} --display-name='CHE IDE'"
  ignore_errors: true

- name: Make sure we go back do default project
  shell: "oc project default"
  
- name: Provision Che with Single User
  shell: "oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-single-user.yml \
  --param PROJECT_NAME={{che_project}} \
  --param DOMAIN_NAME={{ocp_apps_domain}} \
  --param OPENSHIFT_OAUTH_TOKEN={{openshift_oauth_token}} \
  | oc create -f - -n {{che_project}}"
  ignore_errors: true

- name: Check if che Che is deployed
  uri: 
    url: http://che-rh-che-{{guid}}.{{ocp_apps_domain}}/api/stack
    method: GET
  retries: 100
  delay: 20
  register: response
  until: response.status == 200
  changed_when: false

- name: Update custom stack to Che
  uri: 
    url: http://che-rh-che-{{guid}}.{{ocp_apps_domain}}/api/stack
    method: POST
    return_content: yes
    body: |
        {
          "name": "Day in the life Workshop",
          "description": "Agile Integration developer Workshop",
          "scope": "general",
          "workspaceConfig": {
            "environments": {
              "default": {
                "recipe": {
                  "type": "dockerimage",
                  "content": "weimeilin/che-centos-jdk8"
                },
                "machines": {
                  "dev-machine": {
                    "env": {
                      "MAVEN_OPTS" : "-Xmx512m"
                    },
                    "servers": {
                      "8080/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8080"
                      },
                      "8000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8000"
                      },
                      "9000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9000"
                      },
                      "9001/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9001"
                      }
                    },
                    "volumes": {},
                    "installers": [
                      "org.eclipse.che.exec",
                      "org.eclipse.che.terminal",
                      "org.eclipse.che.ws-agent",
            					"org.eclipse.che.ls.camel"
                    ],
                    "attributes": {
                      "memoryLimitBytes": "2147483648"
                    }
                  }
                }
              }
            },
            "commands": [
              {
                "commandLine": "mvn spring-boot:run -f ${current.project.path}",
                "name": "run spring-boot",
                "type": "mvn",
                "attributes": {
                  "goal": "Run",
                  "previewUrl": "${server.9000/tcp}"
                }
              },
              {
                "commandLine": "mvn generate-sources -f ${current.project.path}",
                "name": "run generate-sources",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "cd ${explorer.current.file.path} && mvn fabric8:deploy",
                "name": "fabric8:deploy",
                "type": "mvn",
                "attributes": {
                  "goal": "Deploy",
                  "previewUrl": ""
                }
              }
            ],
            "projects": [],
            "defaultEnv": "default",
            "name": "default",
            "links": []
          },
          "components": [
            {
              "version": "---",
              "name": "CentOS"
            },
            {
              "version": "1.8.0_45",
              "name": "JDK"
            },
            {
              "version": "3.2.2",
              "name": "Maven"
            },
            {
              "version": "3.10",
              "name": "OpenShift CLI"
            }
          ],
          "creator": "ide",
          "tags": [
            "Java",
            "JDK",
            "Maven",
            "CentOS",
            "Git"
          ],
          "id": "java-oc-day-in-life"
        }
    body_format: json
    status_code: 201

- name: Make sure we go back do default project
  shell: "oc set resources dc/che --limits=cpu=1,memory=2Gi --requests=cpu=200m,memory=512Mi -n {{che_project}}"
                
- name: Annotate the empty project as requested by user
  shell: "oc annotate namespace {{che_project}} openshift.io/requester={{ocp_username}} --overwrite"

- name: Give ocp_username access to ocp_project; user = {{ocp_username}}
  shell: "oc policy add-role-to-user admin {{ocp_username}} -n {{che_project}}"
  

- name: workload Tasks Complete
  debug:
    msg: workload Tasks Complete

  
