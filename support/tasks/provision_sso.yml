---

- name: Define sso
  set_fact:
    sso_project: "rh-sso-{{guid}}"

- name: Define sso version
  set_fact:
    sso_version: "ose-v1.4.9"
    
    
- name: Create project for Red Hat SSO
  shell: "oc new-project {{sso_project}} --display-name='Red Hat SSO'"
  ignore_errors: true
  
      
- name: Create service account for clustering
  shell: "oc create sa sso-service-account -n {{ sso_project }}"


- name: Annotate the empty project as requested by user
  shell: "oc annotate namespace {{sso_project}} openshift.io/requester={{ocp_username}} --overwrite"

- name: Give ocp_username access to ocp_project; user = {{ocp_username}}
  shell: "oc policy add-role-to-user admin {{ocp_username}} -n {{sso_project}}"
  
- name: Add cluster view policy to sa for clustering
  shell: "oc policy add-role-to-user view system:serviceaccount:{{ sso_project }}:sso-service-account -n {{ sso_project }}"


- name: Make sure we go back to default project
  shell: "oc project default"

- name: Check if image streams are available
  shell: "oc describe is redhat-sso72-openshift -n openshift"
  register: imagestream_exists
  ignore_errors: true

- name: Create image streams for RH SSO
  shell: "oc create -f https://raw.githubusercontent.com/jboss-openshift/application-templates/{{ sso_version }}/sso/sso72-image-stream.json -n openshift"
  when: imagestream_exists.failed

- name: Create secrets for RH SSO
  shell: "oc create -f https://raw.githubusercontent.com/jboss-openshift/application-templates/{{ sso_version }}/secrets/sso-app-secret.json -n {{ sso_project }}"


- name: Create RH SSO app
  shell: "oc new-app -f https://raw.githubusercontent.com/jboss-openshift/application-templates/{{ sso_version }}/sso/sso72-mysql-persistent.json -p HTTPS_NAME=jboss -p HTTPS_PASSWORD=mykeystorepass -p SSO_ADMIN_USERNAME=keyadmin \
  -p SSO_ADMIN_PASSWORD=keypassword -n {{sso_project}}"


- name: Wait until RH SSO API is available 
  uri: 
    url: https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}
    method: HEAD
    follow_redirects: safe
    validate_certs: no
  register: wait_sso_result
  until: wait_sso_result is succeeded
  ignore_errors: yes
  retries: 15
  delay: 60

- name: Get SSO token
  shell: "curl --insecure -X POST 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/realms/master/protocol/openid-connect/token' \
  -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=keyadmin' -d 'password=keypassword' -d 'grant_type=password' -d 'client_id=admin-cli'"
  register: token_text

- set_fact: TKN={{ (token_text.stdout | from_json).access_token }}

- name: Increase Token Lifespan (60mins)
  uri: 
    url: 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/admin/realms/master'
    method: PUT
    body: "{\"realm\":\"master\", \"accessTokenLifespan\":\"3600\"}"
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ TKN }}"
    return_content: yes
    validate_certs: no
    status_code: 204

- name: Get SSO Token Longer Lifespan
  shell: "curl --insecure -X POST 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/realms/master/protocol/openid-connect/token' \
  -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=keyadmin' -d 'password=keypassword' -d 'grant_type=password' -d 'client_id=admin-cli'"
  register: token_text

- set_fact: TKN={{ (token_text.stdout | from_json).access_token }}

- debug: var=TKN


- name: Create realms
  include_tasks: ./provision_sso_create-realms.yml
  


- name: Make sure we go back to default project
  shell: "oc project default"
